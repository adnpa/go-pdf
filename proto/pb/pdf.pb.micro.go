// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pdf.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PdfService service

func NewPdfServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PdfService service

type PdfService interface {
	CreatePdf(ctx context.Context, in *PdfRequest, opts ...client.CallOption) (*PdfDetailResponse, error)
	GetPdfsList(ctx context.Context, in *PdfRequest, opts ...client.CallOption) (*PdfListResponse, error)
	GetPdf(ctx context.Context, in *PdfRequest, opts ...client.CallOption) (*PdfDetailResponse, error)
	UpdatePdf(ctx context.Context, in *PdfRequest, opts ...client.CallOption) (*PdfDetailResponse, error)
	DeletePdf(ctx context.Context, in *PdfRequest, opts ...client.CallOption) (*PdfDetailResponse, error)
}

type pdfService struct {
	c    client.Client
	name string
}

func NewPdfService(name string, c client.Client) PdfService {
	return &pdfService{
		c:    c,
		name: name,
	}
}

func (c *pdfService) CreatePdf(ctx context.Context, in *PdfRequest, opts ...client.CallOption) (*PdfDetailResponse, error) {
	req := c.c.NewRequest(c.name, "PdfService.CreatePdf", in)
	out := new(PdfDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdfService) GetPdfsList(ctx context.Context, in *PdfRequest, opts ...client.CallOption) (*PdfListResponse, error) {
	req := c.c.NewRequest(c.name, "PdfService.GetPdfsList", in)
	out := new(PdfListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdfService) GetPdf(ctx context.Context, in *PdfRequest, opts ...client.CallOption) (*PdfDetailResponse, error) {
	req := c.c.NewRequest(c.name, "PdfService.GetPdf", in)
	out := new(PdfDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdfService) UpdatePdf(ctx context.Context, in *PdfRequest, opts ...client.CallOption) (*PdfDetailResponse, error) {
	req := c.c.NewRequest(c.name, "PdfService.UpdatePdf", in)
	out := new(PdfDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdfService) DeletePdf(ctx context.Context, in *PdfRequest, opts ...client.CallOption) (*PdfDetailResponse, error) {
	req := c.c.NewRequest(c.name, "PdfService.DeletePdf", in)
	out := new(PdfDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PdfService service

type PdfServiceHandler interface {
	CreatePdf(context.Context, *PdfRequest, *PdfDetailResponse) error
	GetPdfsList(context.Context, *PdfRequest, *PdfListResponse) error
	GetPdf(context.Context, *PdfRequest, *PdfDetailResponse) error
	UpdatePdf(context.Context, *PdfRequest, *PdfDetailResponse) error
	DeletePdf(context.Context, *PdfRequest, *PdfDetailResponse) error
}

func RegisterPdfServiceHandler(s server.Server, hdlr PdfServiceHandler, opts ...server.HandlerOption) error {
	type pdfService interface {
		CreatePdf(ctx context.Context, in *PdfRequest, out *PdfDetailResponse) error
		GetPdfsList(ctx context.Context, in *PdfRequest, out *PdfListResponse) error
		GetPdf(ctx context.Context, in *PdfRequest, out *PdfDetailResponse) error
		UpdatePdf(ctx context.Context, in *PdfRequest, out *PdfDetailResponse) error
		DeletePdf(ctx context.Context, in *PdfRequest, out *PdfDetailResponse) error
	}
	type PdfService struct {
		pdfService
	}
	h := &pdfServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PdfService{h}, opts...))
}

type pdfServiceHandler struct {
	PdfServiceHandler
}

func (h *pdfServiceHandler) CreatePdf(ctx context.Context, in *PdfRequest, out *PdfDetailResponse) error {
	return h.PdfServiceHandler.CreatePdf(ctx, in, out)
}

func (h *pdfServiceHandler) GetPdfsList(ctx context.Context, in *PdfRequest, out *PdfListResponse) error {
	return h.PdfServiceHandler.GetPdfsList(ctx, in, out)
}

func (h *pdfServiceHandler) GetPdf(ctx context.Context, in *PdfRequest, out *PdfDetailResponse) error {
	return h.PdfServiceHandler.GetPdf(ctx, in, out)
}

func (h *pdfServiceHandler) UpdatePdf(ctx context.Context, in *PdfRequest, out *PdfDetailResponse) error {
	return h.PdfServiceHandler.UpdatePdf(ctx, in, out)
}

func (h *pdfServiceHandler) DeletePdf(ctx context.Context, in *PdfRequest, out *PdfDetailResponse) error {
	return h.PdfServiceHandler.DeletePdf(ctx, in, out)
}
