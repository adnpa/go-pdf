// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pdf.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PdfService service

func NewPdfServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PdfService service

type PdfService interface {
	Split(ctx context.Context, in *SplitReq, opts ...client.CallOption) (*SplitResp, error)
	Merge(ctx context.Context, in *MergeReq, opts ...client.CallOption) (*MergeResp, error)
	AddWaterMark(ctx context.Context, in *AddWaterMarkReq, opts ...client.CallOption) (*AddWaterMarkResp, error)
}

type pdfService struct {
	c    client.Client
	name string
}

func NewPdfService(name string, c client.Client) PdfService {
	return &pdfService{
		c:    c,
		name: name,
	}
}

func (c *pdfService) Split(ctx context.Context, in *SplitReq, opts ...client.CallOption) (*SplitResp, error) {
	req := c.c.NewRequest(c.name, "PdfService.Split", in)
	out := new(SplitResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdfService) Merge(ctx context.Context, in *MergeReq, opts ...client.CallOption) (*MergeResp, error) {
	req := c.c.NewRequest(c.name, "PdfService.Merge", in)
	out := new(MergeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdfService) AddWaterMark(ctx context.Context, in *AddWaterMarkReq, opts ...client.CallOption) (*AddWaterMarkResp, error) {
	req := c.c.NewRequest(c.name, "PdfService.AddWaterMark", in)
	out := new(AddWaterMarkResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PdfService service

type PdfServiceHandler interface {
	Split(context.Context, *SplitReq, *SplitResp) error
	Merge(context.Context, *MergeReq, *MergeResp) error
	AddWaterMark(context.Context, *AddWaterMarkReq, *AddWaterMarkResp) error
}

func RegisterPdfServiceHandler(s server.Server, hdlr PdfServiceHandler, opts ...server.HandlerOption) error {
	type pdfService interface {
		Split(ctx context.Context, in *SplitReq, out *SplitResp) error
		Merge(ctx context.Context, in *MergeReq, out *MergeResp) error
		AddWaterMark(ctx context.Context, in *AddWaterMarkReq, out *AddWaterMarkResp) error
	}
	type PdfService struct {
		pdfService
	}
	h := &pdfServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PdfService{h}, opts...))
}

type pdfServiceHandler struct {
	PdfServiceHandler
}

func (h *pdfServiceHandler) Split(ctx context.Context, in *SplitReq, out *SplitResp) error {
	return h.PdfServiceHandler.Split(ctx, in, out)
}

func (h *pdfServiceHandler) Merge(ctx context.Context, in *MergeReq, out *MergeResp) error {
	return h.PdfServiceHandler.Merge(ctx, in, out)
}

func (h *pdfServiceHandler) AddWaterMark(ctx context.Context, in *AddWaterMarkReq, out *AddWaterMarkResp) error {
	return h.PdfServiceHandler.AddWaterMark(ctx, in, out)
}
